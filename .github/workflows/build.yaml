name: QAX Windows Build

on:
  push:
    branches:
      - 'gh-actions'
  workflow_dispatch:

jobs:
  build:
    # whilst we might never need it, it does however fleshout the idea of multiple os and py builds
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["windows-latest"]
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v4

      - name: Cache conda
        uses: actions/cache@v3
        env:
          # Increase this value to reset cache if setup.py has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('conda-environment.yaml') }}

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
          environment-file: conda-environment.yaml

      # avoid building with --no-deps; can lead to broken libraries; pulled the packages into requirements.txt
      # - name: Install packages with no-deps
      #   shell: bash -l {0}
      #   run: |
      #     conda install -y -c conda-forge --no-deps --file requirements-no-deps.txt
      #     pip install .
      #
      #

      - name: Install QAX
        shell: bash -l {0}
        run: |
          echo "${{  github.ref_name }}" >> version.txt
          conda activate buildqax
          pip install .

      # yes we could have a separate job, specificially a sphinx build action
      # and then upload the artifact and then download it within the win-builder.
      # However, for a distributable build, it makes more sense to build everything
      # from the same environment rather than separate jobs to ensure consistency.
      - name: Docs-build
        shell: bash -l {0}
        run: |
          sphinx-build -b html docs docs/_build/html

      - name: Pyinstaller
        shell: bash -l {0}
        run: |
          pyinstaller .\install\cli.spec

      - name: Zip container
        shell: bash -l {0}
        run: |
          tar -czf "qax_dist_${{  github.ref_name }}.zip" dist/qax

      - name: Run inno setup
        shell: bash -l {0}
        run: |
          cp version.txt install/  # rework. the qax.iss requires a C def titled MyAppVersion
          ISCC install/qax.iss

      - name: Upload QAX Windows distribution
        uses: actions/upload-artifact@v3
        with:
          name: QAX-Distribution
          path: "qax_dist_${{  github.ref_name }}.zip"
          retention-days: 6

      - name: Upload QAX Windows Setup
        uses: actions/upload-artifact@v3
        with:
          name: QAX-Setup
          path: "qax_setup_${{  github.ref_name }}.exe"
          retention-days: 6


# TODO; docs build, windows installer inno setup, gh release, 

      # mamba outlay, caching for day builds
      # - name: Get current date
      #   id: date
      #   run: echo "date=$(date +%Y-%m-%d)" >> "${GITHUB_OUTPUT}"
      # - uses: mamba-org/setup-micromamba@v1
      #   with:
      #     environment-file: environment.yml
          # cache for same day builds
      #     cache-environment-key: environment-${{ steps.date.outputs.date }}
      #     cache-downloads-key: downloads-${{ steps.date.outputs.date }}

# https://dev.to/epassaro/caching-anaconda-environments-in-github-actions-5hde
# https://github.com/mamba-org/setup-micromamba
# https://github.com/mamba-org/setup-micromamba#notes-on-caching
# https://github.com/marketplace/actions/setup-micromamba
# https://carpentries-incubator.github.io/introduction-to-conda-for-data-scientists/04-sharing-environments/index.html#:~:text=Conda%20uses%20YAML%20(%E2%80%9CYAML%20Ain,style%20indentation%20to%20indicate%20nesting.
# https://saturncloud.io/blog/how-to-create-a-conda-environment-based-on-a-yaml-file-a-guide-for-data-scientists/
# https://github.com/actions/runner-images/blob/main/images/win/Windows2022-Readme.md
